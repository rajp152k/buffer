:PROPERTIES:
:ID:       20230712T224009.631876
:END:
#+title: Emacs
#+filetags: :emacs:

* Doom Configs
** init.el
#+begin_src elisp
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;(corfu +orderless)  ; complete with cap(f), cape and a flying feather!
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       indent-guides     ; highlighted indent columns
       ;;(ligatures +extra +fira)         ; ligatures and symbols to make your code pretty again
       minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       (window-select +switch-window)     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       lispy             ; vim for lisp, for people who don't like vim
       ;; ;;multiple-cursors  ; editing in many places at once
       ;; ;;objed             ; text object editing for the innocent
       ;; ;;parinfer          ; turn lisp into python, sort of
       ;; ;;rotate-text       ; cycle region at point between text candidates
       ;; snippets
                                        ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       eww               ; the internet is gross
       ibuffer           ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       (debugger +lsp)          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       (docker +lsp)
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       (lookup +dictionary +offline +docsets)              ; navigate your code and its documentation
       (lsp +peek)               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;terraform         ; infrastructure as code
       tmux              ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +roam2 +journal +present +pandoc)               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       plantuml          ; diagrams for confusing people more
       ;;graphviz          ; diagrams for confusing yourself even more
       ;;purescript        ; javascript, but functional
       (python +lsp +pyright +conda)            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       (racket +lsp +xp)            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       (rest +jq)              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +lsp)               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src
** config.el
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

(when (daemonp)
  (exec-path-from-shell-initialize))

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Raj Patil"
      user-mail-address "raj@thebitmage.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
(setq doom-font (font-spec :family "FiraCodeNerdFontMono" :size 14 :weight 'medium))
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-acario-dark)
;; (setq doom-acario-dark-padded-modeline t)
;; (setq doom-acario-dark-brighter-modeline t)

(load-theme 'gotham t)
(set-frame-parameter nil 'alpha-background 100)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "/home/rp152k/source/vcops/org")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

                                        ;Misc

(defun life-hex-count ()
  "number of days I've been alive"
  (interactive)
  (let* ((birth (date-to-time "2000-05-01 19:30 IST"))
         (today (date-to-time (format-time-string "%Y-%m-%d %H:%M:%S %Z" (current-time)) ))
         (diff (float-time (time-subtract today birth))))
    (insert (concat " " (format "0x%X" (/ diff 86400))))))

(defun hex-ops ()
  "hexify decimal number at point, invoke life hex at count if nil"
  (interactive)
  (defun delete-word-at-point ()
    (kill-word 1)
    (backward-kill-word 1))
  (defun valid-number-p (str)
    "Check if a string is a valid number."
    (string-match-p "^[+-]?[0-9]*\\.?[0-9]+\\(?:[eE][+-]?[0-9]+\\)?$" str))
  (let ((dec-days (word-at-point)))
    (cond ((null dec-days) (life-hex-count))
          ((valid-number-p dec-days) (progn
                                       (delete-word-at-point)
                                       (insert (format " 0x%X " (string-to-number dec-days))))))))

                                        ; GTD

(use-package! org
  :config
  (setq org-startup-numerated t)
  (setq org-agenda-files '("/home/rp152k/source/vcops/org/GTD/GTD_HQ.org"))
  (setq org-capture-templates
	'(("n" "Next Action" entry (file+headline "/home/rp152k/source/vcops/org/GTD/GTD_HQ.org" "NA")
           "* TODO %?\n  %i\n  %a")
          ("m" "Meet" entry (file+headline "/home/rp152k/source/vcops/org/GTD/GTD_HQ.org" "Meets")
           "* @ %? w/")
	  ("e" "Event" entry (file+headline "/home/rp152k/source/vcops/org/GTD/GTD_HQ.org" "Events")
           "* %?\nSCHEDULED: %T\n  %i")
          ("i" "IN" entry (file+headline "/home/rp152k/source/vcops/org/GTD/GTD_HQ.org" "INQ")
           "* %?\nEntered on %U\n  %i\n  %a")
	  ("t" "Tickler" entry (file+headline "/home/rp152k/source/vcops/org/GTD/GTD_HQ.org" "Tickler")
	   "* WAIT %?\nDEFER THOUGHT TO: %T\n %i"))))


                                        ;roam (+roam2)
(use-package! org-roam
  :config
  (setq org-roam-directory "/home/rp152k/source/vcops/org/roam/Content"))

(defun gtd-workspace()
  "open the GTD workspace"
  (interactive)
  (find-file "/home/rp152k/source/vcops/org/GTD/GTD_HQ.org"))

                                        ;blogging
(use-package! easy-hugo
  :config
  (setq easy-hugo-basedir "/home/rp152k/source/vcops/thebitmage.com"))

                                        ;gptel
(use-package! gptel
  :config
  (setq
   gptel-api-key "<OPENAI_API_KEY>"
   gptel-model "gpt-4o"
   gptel--system-message "You provide terse but complete responses with good coverage of the concept asked while also providing the caveats involved in what is being discussed. Freely use examples of existing tools and analogies to better explain the concept with links if they exist."))



                                        ;citar
(use-package! citar
  :custom
  (org-cite-global-bibliography '("/home/rp152k/source/vcops/org/roam/Content/bib/references.bib"))
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (citar-bibliographies org-cite-global-bibliography)
  (citar-bibliography org-cite-global-bibliography))

                                        ;org-roam-ui
(use-package! org-roam-ui
  :after org-roam ;; or :after org
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

                                        ;LSP
(use-package! lsp-mode
  :hook (lsp-mode . (lambda ()
                      (let ((lsp-keymap-prefix "C-M-l"))
                        (lsp-enable-which-key-integration))))
  :config
  (define-key lsp-mode-map (kbd "C-M-l") lsp-command-map)
  (setq lsp-enable-symbol-highlighting t)
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-show-with-cursor t)
  (setq lsp-ui-sideline-enable nil)
  (setq lsp-diagnostics-provider :none)
  (setq lsp-headerline-breadcrumb-enable t)
  (setq lsp-headerline-breadcrumb-enable-diagnostics nil)
  (setq lsp-signature-auto-activate t)
  (setq lsp-signature-render-documentation t)
  (setq lsp-completion-provider :capf)
  (setq lsp-completion-show-detail t)
  (setq lsp-enable-snippet t)
  (setq lsp-modeline-code-action t))

                                        ; Conda
(use-package! conda
  :config
  (setq conda-anaconda-home (expand-file-name  "~/mambaforge"))
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell)
  (conda-env-autoactivate-mode t)
  (add-hook 'find-file-hook (lambda () (when (bound-and-true-p conda-project-env-path)
                                    (conda-env-activate-for-buffer)))))




                                        ;Lisp

(load "~/quicklisp/clhs-use-local.el" 'noerror)


                                        ; Dap maps
(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")
      ;; basics
      :desc "dap next"          "n" #'dap-next
      :desc "dap step in"       "i" #'dap-step-in
      :desc "dap step out"      "o" #'dap-step-out
      :desc "dap continue"      "c" #'dap-continue
      :desc "dap hydra"         "h" #'dap-hydra
      :desc "dap debug restart" "r" #'dap-debug-restart
      :desc "dap debug"         "s" #'dap-debug

      ;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent"  "r" #'dap-debug-recent
      :desc "dap debug last"    "l" #'dap-debug-last

      ;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)


                                        ; Custom Maps

(map! :leader
      "r s" #'restclient-http-send-current
      "w w" #'switch-window
      "l"  #'life-hex-count
      "o g" #'gtd-workspace
      "s w" #'eww
      "t t" #'tldr
      "e h" #'easy-hugo
      "e x" #'eros-eval-defun
      "n i l" #'org-insert-link
      "i g h" #'gptel
      "i g s" #'gptel-send
      "C e" #'org-cite-insert
      "C o" #'citar-open
      "C r r a" #'citar-org-roam-ref-add
      "C d" #'citar-dwim
      "s /" #'+vertico/project-search-from-cwd)

(map! :i "[" #'lispy-brackets [])

(map! "<AudioLowerVolume>" #'pdf-view-next-line-or-next-page
      "<AudioRaiseVolume>" #'pdf-view-previous-line-or-previous-page)

                                        ; Misc Maps
(map! "M-c" #'capitalize-dwim)
#+end_src
** package.el
#+begin_src elisp
(package! tldr)

(package! easy-hugo
  :recipe (:host github :repo "/masasam/emacs-easy-hugo"))

(package! gptel)

(package! org-roam-ui)

(package! exec-path-from-shell)

(package! gotham-theme)
#+end_src
** custom.el
#+begin_src elisp
(put 'narrow-to-region 'disabled nil)
#+end_src
* Stream
** 0x22CA
*** Context
 - working in the cloud native space
 - golang is the cloud native language
*** Go installation
 - install go and add to path
   - https://go.dev/doc/install
 - verify with =go version=
*** Lsp-mode with golang
- install gopls :
  - =go install golang.org/x/tools/gopls@latest=
  - verify with =gopls version=
*** Sentinel repository
 - =git clone https://github.com/rajp152k/xkcd-corpus-builder=
 - jumping around
 - running tests
   - ginkgo and gomega
 - lsp all options
 - snippets
 - M-x Compile
 - local e-shell
*** Debugging with Dap
*** Bonus Video
** 0x22CA
- setting up emacs for data science
- basic priorities : interactive repl based on which mamba env I am in
- language server integration
- able to see notebooks and images
- able to work with juptyer notebooks
** 0x22C9
*** intro

- techno-talkthrough
  - larger, overarching concept
  - rapid practical examples

- this video:

  - idea is to build the conceptual idea buff stackability in you tools

  - the collaborative interop is greater  than the individual worths of these tools

*** buff stacking emacs

   - the extensibility allows the community to be flexible and build all sorts of things

   - can fit your needs (whatever they are)

   - sensible defaults with doom emacs can get you started quickly

   - to the pragmatics right away

   - the toolsets stack on each other due to powerful & uniform underlying representation

   - lisp machine: i'm actively exploring this more and will soon publish fully-baked content

*** pragmatics

 - version control anything: magit
   - faster porcelain than the cli
   - dedicated video coming in soon

 - llm interface as a text buffer

 - eww -> firefox

 - lsp-mode (+ dap + treesitter)
   - polyglotic programming ++
   - generic programming hooks (m-x compile, etc)

 - org -> blogs, todos, capture buffers, notes, literate programming, babel
   - dedicated video coming soon

 - context-aware snippets
   - python
   - go
   - markups, org, markdown

 - dired, projectile, buffer, proc, file management
   - can also use external proc management if you prefer that
   - i prefer btop as a decent monitor of all (metrics) at once
     - temp, other misc stuff
     - compute(cpuutils, mem), storage(iops), networks(b/s)
     - proc management
   - i like it this way: wouldn't want monitoring emacs from emacs

 - i can't even claim to be an efficient emacs user yet
   - don't use elisp as much yet (other than configs), working actively on that front

*** emacs as your os

   - emacs as your os (lucky to spend 90% of my day in emacs)

     - for the modal humans our there : emacs is my normal mode now

     - can further minimize context switching by altering your workflows into more keyboard oriented modalities
       - firefox + vimium
       - i3wm if you're xorg, i'm on wayland so sway

*** what next?

 - i also blog : check out the bitmage.com
   - if you're into text (site.xml rss at the bottom left)

 - a lot of emacs stuff coming in your way

 - also will get into a lot of cli linux/unix/gnu in a phase later on

 - thanks for tuning in, this was the bitmage

** 0x21BD

 - studying how org-lists work : might try to extend the features with something useful of my own
** 0x21b0
 - Will Be Altering The Work Space And The Required Mindset That Allows Me To Run Emacs As A Client With An Ever-Running Daemon
** 0x2178
 - I already use vim bindings in emacs but I do miss the command line
 - have decided to go minimal for my work and retain emacs for personal projects and writing
 - reading up on the unix philosophy and aiming to become a true shell ninja.
 - knowing about Unix operating system does excite me and do hope to learn a lot more
 - I'll definitely never give up emacs but a basic awareness of the operating system with the utilities of a CLI do encourage me to get good at both ecosystems
 - starting a similar [[id:8bc9d1c6-da56-4db9-a904-8f052e6836cb][Vim]] stream to log all my works, I'll be keeping the vimrc simple this time and not be using a lot of external plugins but rely on the vanilla features of vim
 - already excited about getting back to a dark green terminal screen..
** 0x2127
 - youtube video on navigating the text editing landscape
   - on why one should not settle even in 2023
 - starting with the skills necessary to efficiently edit text
   - touch typing -> efficient navigation (vim) -> playing with the nuts and bolts (emacs)
     - why not VS code?
** 0x211F
 - thinking of writing and emacs extension
   - visualizing my knowledge graph in an interactive manner
   - existing extensions do exist but it would be a good experience building it from scratch
   - will be proceeding formally and take it up as a proper initiative
** 0x211E
Started using smudge (spotify on emacs) : more time in emacs...
Thinking of summarizing my init.el in a blog : been around 2-3 years since I last did that 
** 0x2118
The single greatest tool choice I've ever made in terms of editing efficiently (right along side vim : I use Evil GccEmacs 28 as of now)
* Literature
 - [ ] https://www.masteringemacs.org/
 - [ ] https://www.oreilly.com/library/view/writing-gnu-emacs/9781449395056/
* Refs
 - my [[id:20230809T095308.040286][init.el]]
* Utilities
** [[id:be1c795a-add6-4122-add5-ead5f45fbab2][Org-mode]]
** [[id:72e5e672-da30-4fda-9efb-6258a1712f8f][Tramp]]
