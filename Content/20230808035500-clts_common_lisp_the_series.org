:PROPERTIES:
:ID:       20230808T035500.251803
:END:
#+title: CLTS: common lisp-the series
#+filetags: :yt:lisp:

* Abstract : V 0.0

An end to end series on common-lisp. From env setup, covering the basics until language native complexities (macros) and being able to adapt styles from other languages/specific domains (monads, static types, quantum computation etc): End with interop with other languages and how one can use lisp in common-place projects (dialects, transpilation, etc).

While definining the series structure, following a top down approach initially for deducing what all needs to be covered. Will fill in the crevices later on.

* Comment stream
** 0x2147 CLTS 0.1 : Representing Programs

*** What are programs really ?

- a set of instructions that carry a computer from an initial to a final state

- the initial and final state encompass the input and output respectively

  
*** What is source code then?

- the computer understands binary code 

- intermediaries that map source code to corresponding binary code
  
**** Instance: byte code

#+begin_src python :results output
  import dis

  def add10(x:int) -> int:
    return x + 10

  print(dis.dis(add10))
#+end_src

#+RESULTS:
:   4           0 LOAD_FAST                0 (x)
:               2 LOAD_CONST               1 (10)
:               4 BINARY_ADD
:               6 RETURN_VALUE
: None


*** Why the Parentheses?

- infix to prefix

- uniformity over promoting convenient habits

#+begin_src python :results output
  print(23 + 234 + 100)
#+end_src

#+RESULTS:
: 357

#+begin_src lisp 
  (+ 23 234 100)
#+end_src

#+RESULTS:
: 357

#+begin_src python :results output
  print(sum([23,234,100]))
#+end_src

#+RESULTS:
: 357


*** The S-Expression

- i.e symbolic expressions

  - ( operator ... operands ...)

- natural segue into representing code as data (aka [[id:20230728T053744.817854][homoiconicity]])

  - as nested lists :-> hence the name ..
    - LISt Processing


*** Pseudo-Code

#+begin_src pseudo
:INPUT -> temperature in celcius
:OUTPUT -> temperature in fahrenheit

:BEGIN
 - multiply by 9
 - divide by 5
 - add 32
 - return as output
:END
#+end_src

#+begin_src python :results output
  def celc2fahr(celc):
    return (celc * 9) / 5 + 32

  print(celc2fahr(0))
#+end_src

#+RESULTS:
: 32.0

#+begin_src lisp
  (defun celc2fahr (celc)
    (+ (/ (* celc 9)
  	5)
       32))

  (celc2fahr 0)
#+end_src

#+RESULTS:
: 32

** 0x2146
 - done with CLTS 0, beginning with CLTS 1
 - a high level discussion of what really communicating with the computer is all about.
 - familiarizing ourselves with the vocabulary
 - paradigms of computation : Turing machine and Lambda calculus (considerable inclusion)
   - start with basic math
 - talk about what a program really is: in terms of black boxes -> result in definite inputs and outputs.
   - chain and nest a bunch of smaller programs together and you get a more complicated program -> intro to abstractions
   - a basic program of converting temperature between different units.
 - once you define what a program does, you can start building a representation for them.
 - S - expressions 
   -> infix, postfix and prefix notation

* Content
** Types

The series will be a splice between the different following phases - even at the video of a single level.

*** Meta Phase
 - about tools, and environment setup

*** Theoretical Phase
 - covers introduction and philosophical discussion on various tools and concepts

*** Practical Phase
 - a practical component that discusses the technical aspects of the language (separate from the Meta Phase)

** Structure
*** Introduction and Env Setup
 - intro to common lisp : history
 - why consider a lisp? -> articles, etc.
 - env setup : recommend -> emacs, slime
   - alternatives : lem
 - helping build the third/fourth generation of lisp programmers
 - incentive on why learn lisp
 - refer compilation speed ups while being able to enjoy an interpreted langauge
 - from the perspective of a beginner
*** Basics
 - getting comfortable with the repl
 - variables, data types and basic operations
 - conditionals (special operators) (if, when, unless, cond, etc)
 - iteration and recursion
 - function
 - IO : format, read, yes-or-no-p -> quick coverage
*** Data Structures
 - the primitive glue in lisp: cons
   - good exercise : implement cons, car, cdr with functions
 - arrays, vectors, sequences
 - hash tables and associative arrays
 - def-struct and defer CLOS into the future
*** Object Oriented Programming
 - CLOS
 - all that goes along with the basic OOP
*** Error handling / debugging 
 - condition system
 - debugging tools
*** Practical component and self-study
 - build something in lisp
*** Advanced Topics
 - macros
 - performance optimization
 - multithreading and concurrency
 - interop with other languages
*** Conclusion
 - final thoughts
 - books, resources, recommendations

* Output 
** CLTS 0
 - youtube : https://youtu.be/jLonMxrVPbY
 - blog : https://rajpatil.dev/post/clts/clts-0


 
