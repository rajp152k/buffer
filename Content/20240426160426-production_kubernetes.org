:PROPERTIES:
:ID:       9ee8a972-bf6a-46ae-a7f5-dda8814a2fcf
:END:
#+title: Production Kubernetes
#+filetags: :compute:arch:book:

* Abstract
With the intention of building a deep understanding of kubernetes in the wild, will be going for an end to end read of the book that is freely hosted by VMware (link available in the resources section in the [[id:c2072565-787a-4cea-9894-60fad254f61d][Kubernetes]] node).

This is an advanced technical read. Testing out an approach described here in the [[id:920fbb25-fcb3-4045-81a2-547cbef8fc83][reading node]].

* C1: A Path to Production
** Chapter Objective
 - chart out the considerations one needs when looking to deploy with kubernetes.
** Overarching Capabilities
 - workload distribution across hosts
 - declarative, customizable API for cluster interaction 
 - cli access to the API via ~kubectl~
 - pull in current state into a provided desired state
 - exposing interfaces to enable pluggable networking, storage, etc
** What does kubernetes solve?
 - given the capabilities, kubernetes enables production grade container orchestration.
** Core Components
*** API Server
 - interaction that allows mutating the cluster state
 - the cluster state maintenance is done via a key-value store ([[id:3568f42c-6e48-4d10-8249-c95c080a975c][etcd]])
*** Kubelet
 - communicates with the API server to report the status of a node and schedule the necessary workloads
*** Controller Manager
 - set of controllers packaged in a single binary
 - upon request for a desired state, this is responsible for mutation ([[id:37961b23-d768-4a4a-bba6-0bd1199478b6][CRUD]]) of the resources necessary for the acheiving the said state.
*** Scheduler
 - determines the optimal node (decision via filtering and scoring) where a workload should be scheduled
*** Kube Proxy
 - implements kubernetes services, providing virtual IPs routable to backend pods.
 - done by a packet filtering mechanism such ~iptables~ or ~ipvs~.

** Beyond Orchestration
