:PROPERTIES:
:ID:       c5c4cca7-8b5a-4a89-b6f9-93c039a09ee0
:END:
#+title: Advent of Code 2024
#+filetags: :project:


* Day 1

 - some initial parsing done by vim macros

#+begin_src lisp
(ql:quickload :alexandria)

(defvar test-input
  '((3   4)
    (4   3)
    (2   5)
    (1   3)
    (3   9)
    (3   3)))

;;
;; Part 1
(defmacro parse-sort (selector input)
  (let ((ele (gensym)))
    `(sort (mapcar #'(lambda (,ele)
                       (coerce (,selector ,ele) 'integer))
                   ,input)
      #'>)))


(defun add-abs-diff-solver (input)
 (apply #'+ (mapcar (lambda (x y) (abs (- x y) ))
                       (parse-sort car input)
                       (parse-sort cadr input))))

;; Part 2
;;

(defun build-hash (lis table)
  (labels ((increment-hash (ele)
             (if (gethash ele table)
                 (incf (gethash ele table) 1)
                 (setf (gethash ele table) 1))))
    (mapcar #'increment-hash lis)))

(defun built-hash (lis)
  (let ((hash (make-hash-table)))
    (build-hash lis hash)
    hash))

(defun freq-mul-add-solver (input)
  (let ((h-a (built-hash (parse-sort car input)))
        (h-b (built-hash (parse-sort cadr input)))
        (acc 0))
    (dolist (ka (alexandria:hash-table-keys h-a)
                acc)
      (incf acc (if (gethash ka h-b)
                 (* (gethash ka h-a)
                    (gethash ka h-b)
                    ka)
                 0)))))
#+end_src
