:PROPERTIES:
:ID:       ad4ba668-b2ec-47b1-9214-2284aedaceba
:END:
#+title: Golang
#+filetags: :golang:

* Org Babel Base
#+begin_src go :exports both
package main

import (
	"fmt"
)

func main(){
	fmt.Println("org babel base")
	return
}
#+end_src

* Stream
** 0x234E
 - https://github.com/golangci/golangci-lint
** 0x234C
 - hands on SWE with golang
 - aggressive level up phase
** 0x22B2
- post theGoPL, will finish of TDD with Go
- have found it to be productive when starting out building a new service
- not so much integrating into existing ones : will solidify the habit of writing tests

** 0x22AF
- finished Chapter 4 of cloud native Go
- aggressively, rigorously cementing the detailed fundamentals now with "The Go Programming Language" and getting used to reading the docs
** 0x22AB
- finished "Let's Go"
- will do "Let's Go Further" sometime down the lane
- getting into "Cloud Native Go" now though
- will soon start with open source contribs in the CNCF landscape
- The concurrency model of golang : [[id:0458f827-5634-41e0-b261-dfc5cb2d2389][CSP-Concurrency]]
- choosing golang as my principal language for the close future
- is the lingua-cloud-native and do see myself personally benefitting moving away from the lisp romantic that I am for some time and building practical stuff.
- as usual, I begin with verifying org babel works

  #+begin_src go :exports both
package main

import "fmt"

func main(){
	fmt.Println(`Verifying Org-Babel works for golang
exporting both input and output as I usually do with all source that I write`)
}
  #+end_src

- works, and I'm ready to go..
- unbuffered channels:
  #+begin_src go :exports both
package main

import "fmt"

func main() {
	ch := make(chan string)

	for i:= 0; i < 3; i++{
                go func() {
                        message := <-ch
                        fmt.Println(message)
                        ch <- "pong"
                }()

                ch <- "ping"
                fmt.Println(<-ch)
	}
}
  #+end_src

  #+RESULTS:
  : ping
  : pong
  : ping
  : pong
  : ping
  : pong

- buffered channels

  #+begin_src go :exports both
package main

import "fmt"

func main(){
	ch := make(chan map[string]int,3)

	ch <- map[string]int{"a": 1, "b": 2}
	ch <- map[string]int{"c": 3, "d": 4}
	ch <- map[string]int{"e": 5, "f": 6}

	fmt.Println(<- ch)
	fmt.Println(<- ch)

	close(ch)

	recv, present := <- ch

	fmt.Println(recv, present)

	recv, present = <- ch

	fmt.Println(recv, present)

}
  #+end_src

  #+RESULTS:
  : map[a:1 b:2]
  : map[c:3 d:4]
  : map[e:5 f:6] true
  : map[] false


- looping over channels

  #+begin_src go :exports both
package main
import "fmt"

func main(){
	ch := make(chan int,3)

	ch <- 1
	ch <- 2
	ch <- 3

	close(ch)
	// looping without close would result in a deadlock

	for i := range ch {
		fmt.Println(i)
	}


}
  #+end_src

  #+RESULTS:
  : 1
  : 2
  : 3

- concurrency seems to have been dramatically simplified

  #+begin_src go :exports both
package main

import (
	"fmt"
	"time"
)

func main() {
	var ch chan int

	for i:= 0; i < 2; i++{
                select {
                case m := <- ch:
                        fmt.Println(m)
                case <-time.After(1 * time.Second):
                        fmt.Println("Timed out at:", time.Now())
				}
	}
}

  #+end_src

  #+RESULTS:
  : Timed out at: 2024-08-20 16:58:29.476867225 +0530 IST m=+1.000813585
  : Timed out at: 2024-08-20 16:58:30.477541565 +0530 IST m=+2.001487824

  - might start exploring building generative AI applications in golang
  - I do have an active project that demands LLM integrations
  - I think I might benefit by porting the whole operations into golang
  - have been enjoying it so far.
  - might just stick to golang for all that I write henceforth for a while
  - I haven't specialised in some time, am seriously considering mastering this for good
  - is very straightforward while still allowing for the programming primitives that I enjoy (has a psuedo lisp dialect, closures, lambdas, etc with a priority for pragmatic concurrency)
  - my doom emacs toolchain for golang with dap is also convenient to setup and work with.
  - am willing to explore all the intricacies and the complex things that I can do with go.
  - the core language is minimal but already can anticipate all that I can do with it.
  - going to give this a serious thought.
  - checking out the context package
    - https://pkg.go.dev/context
** 0x2273
- another book : software engineering in golang
- another book : let's go
** 0x2266
 - starting a book: building an orchestrator in golang
** 0x2221
 - pushing for competency : reading the ultimate go notebook
 - will also read up a lot about writing efficient software in general along the way (concurrency, hyperscaled infrastructure oriented software, and the likes)
** 0x21E7
 - starting out with go to get into cloud native applications and rewriting a product
* Books
** Building an orchestrator in golang
:PROPERTIES:
:ID:       3af62b5f-3c13-40c8-a912-18a94b7cb175
:END:

** Cloud Native Go
:PROPERTIES:
:ID:       64bfc13e-1b7c-4cbe-ba0e-9d17ebaacef1
:END:

** The Go Programming Language
:PROPERTIES:
:ID:       bb226cbf-fca1-4306-8f79-6bd87262ced6
:END:

** Hands on SWE Golang
:PROPERTIES:
:ID:       bdec8c33-9117-4ecf-9f97-c511ee4d0f47
:END:
 - https://www.oreilly.com/library/view/hands-on-software-engineering/9781838554491/
** Learn Go with Tests
:PROPERTIES:
:ID:       44bccb93-ebff-4745-baa1-0e85a293c314
:END:
 - https://quii.gitbook.io/learn-go-with-tests


* Resources
 - https://github.com/avelino/awesome-go
