:PROPERTIES:
:ID:       c5c4cca7-8b5a-4a89-b6f9-93c039a09ee0
:END:
#+title: Advent of Code 2024
#+filetags: :project:

* Day 3
#+begin_src lisp
(ql:quickload :uiop)
(ql:quickload :cl-ppcre)

(defvar input (read-file-to-string "input"))

;; part 1

(defun extract-mul-parameters (input-string)
        (multiple-value-bind (matched-p matches)
                (cl-ppcre:scan-to-strings "mul\\((\\d+),(\\d+)\\)" input-string)
            (when matched-p
                    matches)))

(defun parse-mul (match)
        (let* ((parse-vec (extract-mul-parameters match))
                    (n1 (parse-integer (svref parse-vec 0)))
                    (n2 (parse-integer (svref parse-vec 1))))
            (* n1 n2)))

(defun solve-p1 (input)
        (apply #'+ (mapcar #'parse-mul
                                (cl-ppcre:all-matches-as-strings
                                    "mul\\((\\d+),(\\d+)\\)"
                                        input))))
;; part 2

(defun solve-p2 (input)
        (let ((do? t)
                (acc 0))
            (dolist (state (cl-ppcre:all-matches-as-strings
                                "mul\\((\\d+),(\\d+)\\)|do\\(\\)|don't\\(\\)"
                                    input)
                                acc)
                    (cond ((equal state "do()") (setf do? t))
                            ((equal state "don't()") (setf do? nil))
                                (t (when do?
                                            (incf acc (parse-mul state))))))))
#+end_src
* Day 2

#+begin_src lisp
(defvar test-input
  '((7 6 4 2 1)
    (1 2 7 8 9)
    (9 7 6 2 1)
    (1 3 2 4 5)
    (8 6 4 4 1)
    (1 3 6 7 9)))

(defun transit-diff-set (report)
  (let ((len (length report)))
    (remove-duplicates (mapcar #'(lambda (n-1 n)
                                   (- n n-1))
                               (subseq report 0 (- len 1))
                               (subseq report 1 len)) )))

(defun dampened-val-report (report)
  (if (val-report report)
      1
      (do ((i 0 (+ 1 i)))
          ((= i (length report)) 0)
        (let ((candidate (append
                          (subseq report 0 i)
                          (subseq report (+ i 1) (length report)))))
          (when (val-report candidate)
            (return 1))))))

(defun val-report (report)
  (let* ((diffs (transit-diff-set report))
         (abs-diffs (remove-duplicates (mapcar #'abs diffs))))
    (cond ((find 0 abs-diffs )  nil)
          ((> (apply #'max abs-diffs) 3) nil)
          ((= (length (remove-duplicates (mapcar #'signum diffs))) 2) nil)
          (t 1))))

(defun safe-reports (input)
  (apply #'+ (mapcar #'dampened-val-report input)))
#+end_src

* Day 1

#+begin_src lisp
(ql:quickload :alexandria)

(defvar test-input
  '((3   4)
    (4   3)
    (2   5)
    (1   3)
    (3   9)
    (3   3)))

;;
;; Part 1
(defmacro parse-sort (selector input)
  (let ((ele (gensym)))
    `(sort (mapcar #'(lambda (,ele)
                       (coerce (,selector ,ele) 'integer))
                   ,input)
      #'>)))


(defun add-abs-diff-solver (input)
 (apply #'+ (mapcar (lambda (x y) (abs (- x y) ))
                       (parse-sort car input)
                       (parse-sort cadr input))))

;; Part 2
;;

(defun build-hash (lis table)
  (labels ((increment-hash (ele)
             (if (gethash ele table)
                 (incf (gethash ele table) 1)
                 (setf (gethash ele table) 1))))
    (mapcar #'increment-hash lis)))

(defun built-hash (lis)
  (let ((hash (make-hash-table)))
    (build-hash lis hash)
    hash))

(defun freq-mul-add-solver (input)
  (let ((h-a (built-hash (parse-sort car input)))
        (h-b (built-hash (parse-sort cadr input)))
        (acc 0))
    (dolist (ka (alexandria:hash-table-keys h-a)
                acc)
      (incf acc (if (gethash ka h-b)
                 (* (gethash ka h-a)
                    (gethash ka h-b)
                    ka)
                 0)))))
#+end_src
