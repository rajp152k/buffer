:PROPERTIES:
:ID:       20230812T170051.977772
:END:
#+title: Rust
#+filetags: :rust:

* Stream
Just a casual comment stream...
** 0x2137
 - basic functionalities from the standard library are brought in every rust program by default and collectively termed as the prelude.
   - checkout https://doc.rust-lang.org/stable/std/prelude/index.html
 - anything outside of the prelude must be brought in explicitly with the ~use~ statement
   - for instance, to read user input, one can ~use std::io;~ followed by ~io::stdin().readline()~ in the program.
 - variables are immutable by default... : that some healthy practice...
 - references exist so that's nice, have a little experience programming in modern C++ and I did enjoy specifying every specific type back in the day.
 - so, piping is inbuilt into rust's syntax and there's a pretty natural way to do it...
 - something like ~(A (B (C)))~ in lisp would be written as ~C().B().A()~ in rust -> fairly convenient
   - encourages are bottom up way of thinking which is more natural to some than a top down approach.
 - there's terminology to refer to the formal mathematics of a program's execution -> variants, states ..
   - so far, so good -> I could see myself learning rust for good.
 - there's pythonic format format strings but with distinction for variables and results of an expression
   - don't quite understand this design choice: 

     #+begin_src rust :wrap src
       let x = 1;
       println!("{x} is inside, but {} isn't", x + 1);
     #+end_src

     #+RESULTS:
     #+begin_src
     1 is inside, but 2 isn't
     #+end_src

     #+begin_src rust :wrap src
       let x = 1;
       println!("{x+1} should throw an error");
     #+end_src

     #+RESULTS:
     #+begin_src 
     : error: Could not compile `cargokGzHoR`.
     #+end_src



     
** 0x2136
 - I couldn't find an appropriate end-to-end solution to publish my org-roam-notes with a graphical interface.
 - rust has been on my learning list for a long time. 
 - I first learned about WASM (web assembly) at the end of 2020 but never got around building something on the web with it.
 - this is a good opportunity to learn about rust and wasm (will be using yew) while building something that I'll actually be able to use.
 - The first step is to complete [[id:20230812T171410.113610][the rust book]].
   #+begin_src rust
     fn main() {
     println!("hello world")
     }
   #+end_src
 - will setup a [[id:20230812T200515.697950][literate programming]] setup soon for rust..

* Resources

** Emacs setup
 - [[https://robert.kra.hn/posts/rust-emacs-setup/][Configuring Emacs for Rust development | Robert Krahn]]
** The Book (rust)
:PROPERTIES:
:ID:       20230812T171410.113610
:END:

** formatter : rustfmt
 - https://github.com/rust-lang/rustfmt

** package manager : cargo
 - https://github.com/rust-lang/cargo
