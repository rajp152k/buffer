:PROPERTIES:
:ID:       9c76498b-d358-4a8c-9e52-24c6f1668f8f
:END:
#+title: Compiler
#+filetags: :cs:compiler:

* Abstract
  A compiler is a program that translates source code written in a high-level programming language into machine code or an intermediate code.
* Functionalities
** Main Functions
  - *[[id:700dff70-2a6d-40d4-8e81-996b3be39b47][Lexical Analysis]]*
    - Converts a sequence of characters into a sequence of tokens.
  - *[[id:5b9cb73a-3b58-4055-b762-ab9cbcebe044][Syntax Analysis]] (Parsing)*
    - Checks the source code for correct syntax and generates an abstract syntax tree (AST).
  - *[[id:3f4d2288-6690-4d72-8134-689c76c8e46b][Semantic Analysis]]*
    - Ensures the code adheres to semantic rules.

** Ancillary functions
  - *Optimization*
    - Improves performance through code transformation while preserving functionality.
  - *Code Generation*
    - Produces machine code or intermediate code from the optimized AST.
  - *Code Linking (Sometimes)*
    - Combines various code modules into a single runnable program.

* Types
  - *Single-pass Compiler*
    - Processes the input code in one pass.
  - *Multi-pass Compiler*
    - Processes the input code multiple times for better optimization and error checking.
  - *Just-In-Time (JIT) Compiler*
    - Compiles code at runtime, commonly used in managed runtime environments like Java and .NET.
  - *Cross Compiler*
    - Generates executable code for a platform different from the one on which the compiler is running.
* Connections
  - *[[id:eda24e82-a549-4cc6-96e6-a5330368811d][Interpreters]]*
    - Unlike compilers, interpreters execute high-level code without translating it to machine code. Offers flexibility with a trade-off in performance.
  - *Virtual Machines*
    - Some compilers generate intermediate code that runs on virtual machines, enabling platform independence (e.g., Java Bytecode for JVM).

* Relevancies
** [[id:2dfa41e9-07ba-4deb-a466-af409fa8b465][Writing a lisp]]
