:PROPERTIES:
:ID:       bc1cc0cf-5e6a-4fee-b9a5-16533730020a
:END:
#+title: Cloud Computing
#+filetags: :root:cloud:programming:

In the context of [[id:5c2039f5-0c44-4926-b2d7-a8bf471923ac][Software Engineering]], see [[id:739d8493-d7a6-4eee-b31a-44d087f4fb42][cloud native]].
In the context of [[id:a9430614-4e6e-41ff-9788-0f51c2867e74][Hardware]], see [[id:fc34b43d-57e6-49a7-a678-8ec9df4d0c55][virtualization]]

* Distilled
Most of the services a cloud vendor provides can be segregated along the dimensions (via qualitative and quantitative elaborations) of:
 - Compute
 - Storage
 - Networking

Another aspect that is elementary to interacting with computer pertains to how the [[id:6c4c5f5c-eb8e-461c-9d70-47b2acf010b2][interfaces (I/O)]] are exposes/consumed.

* Abstract

This is an epistemological dive into the nature of cloud computing services.

On an extremely high level, any sort of cloud computing service one provides to a client can be broken down into differing amalgamations of [[id:6f9a4752-aa66-42cf-9b88-2e4fa2091511][compute]] and [[id:40a85632-284f-44f5-a86d-dc287fac1587][storage]] (extents of persistence, to elaborate).

For instance, Functions as a service will be compute oriented (RAM level storages are involved, and data persists till the execution life of the relevant function), where as container as a service will be a mixture of both.

The extent of virtualization in terms of how abstracted your compute is from the baremetal hardware also gives rise to different classes of services.

Intelligently managing the provision of compute and storage over time opens up a whole new opportunity for a suite of meta/administrative tooling (orchestration, scheduling, log analysis)

This core function of a providing a service enables several secondary services that can be used to improve the original provision (log anomaly detection for instance, or power usage prediction to control cooling requirements of a datacenter for instance)

[[id:a4e712e1-a233-4173-91fa-4e145bd68769][Computer Networking]] plays an important role in connecting all the tangibly separate compute and storage into a large functioning system that abstracts away your specific requirements into a specific readily usable service.

Now adding further degrees of freedom to the problem description allows for the core abstraction to fork into as many services as we want to. Some dimensions being:
 - scale
 - security
 - extent of privacy

It would be infeasible to manufacture hardware adapted for each specific combination of the above factors. An ingenious solution to this issue is to have generically manufactured compute that is [[id:fc34b43d-57e6-49a7-a678-8ec9df4d0c55][virtualized]] into symbolic/logical units with pointers to them when required.

** Technical Granularity of Services
See [[id:89784e77-cdd0-460c-a5b9-cb0a18842903][Anything as a service]]
 - Platform
 - Infrastructure
 - Software
* WIPs
** Control Flow
This sub-node intends to document the major points of control when it comes to provisioning resources on the cloud.
*** [[id:d2dce984-a72a-4069-9fae-10b515f97a26][Cloud-Init]]
* Practical Sentinel Refs
 - [[id:c2072565-787a-4cea-9894-60fad254f61d][Kubernetes]]
 - [[id:af4d4e9f-3fd3-4718-ba73-e6af4f57c29c][Docker]] 
 - [[id:03cd8062-b3fb-4cd9-97a8-5d60f037f7b6][Open Stack]]
 - [[id:714b029b-d0ac-4842-89f5-5f871d1a22c7][Software Defined Networking]]

* Resources
 - http://web.stanford.edu/class/cs349d/docs/L01_overview.pdf
 - http://web.stanford.edu/class/cs349d/
