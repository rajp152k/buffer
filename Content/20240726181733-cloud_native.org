:PROPERTIES:
:ID:       739d8493-d7a6-4eee-b31a-44d087f4fb42
:END:
#+title: cloud native
#+filetags: :arch:programming:cloud:

Cloud native refers to designing, developing, and operating applications that optimize cloud computing platforms' features and capabilities.

 I plan to extensively explore the ecosystem and understand the potential trajectory of modern computing and its future:
  - https://landscape.cncf.io/.
  - https://landscape.cncf.io/guide#introduction

 The Projects sub-node in here hosts an index into tooling that I've enqueued for exploration.

 All the major practical components of the cloud native landscape (as of 0x22AB) are being developed in [[id:ad4ba668-b2ec-47b1-9214-2284aedaceba][Golang]] : initializing exploration of the same directed towards my intentions of contributing competently in the CNCF landscape.

* The Path to Cloud Native
- The primary incentive so far pushing the evolution of computing services has been the pressure to [[id:56dbce77-b258-4fde-a6c7-f865e476c879][scale]].
- 1950s : about the [[id:b72d3ca3-53fa-4a97-964f-cbc1a8d612a4][mainframe]] computer with all the [[id:a8cbf516-055a-4ef7-9afe-7a780bda52ab][logic]] and [[id:d45dae92-5148-4220-b8dd-e4da80674053][data]] residing together as one [[id:5be3075a-d718-4f44-b031-4df5547423a2][monolith]].
- 1980s : [[id:a4e712e1-a233-4173-91fa-4e145bd68769][networks]] of personal computers encouraged some changes. Some application logic could be off-loaded to these PCs (partioning into the [[id:e944d11b-ba53-4dc1-aee9-3793f59be8ac][Client-Server Architecture]]) : the first major move towards decoupled services.
- 1990s : the dotcom rush led to explosion of (SaaS) [[id:cbcb26f4-dd24-4f59-8003-25573a7cd034][Software as a Service]].  The associated logistics of operating (develop, deploy, maintain) such a service began to get complex. This further encouraged the decoupling of the business layer in the Client Server architecture into multiple [[id:54978664-78a5-4c2c-ae33-c4e6a14d6bb0][Microservices]].
- 2000s : AWS popularized (IaaS) [[id:de6e9e57-6ba8-4d37-8e62-1a2c2327b275][Infrastructure as a Service]] : yielding the initiation of the term [[id:bc1cc0cf-5e6a-4fee-b9a5-16533730020a][Cloud Computing]].
* Important Terms (checkout [[id:314236f7-81ae-48b7-b62b-dc822119180e][System Design]])
** [[id:56dbce77-b258-4fde-a6c7-f865e476c879][Scalability]]
** [[id:adaf5bfa-48f9-415b-893e-7398b10f383e][Loose Coupling]]
** [[id:b24fb743-99bb-4e1a-b4a4-3b81c9677360][Resilience]]
** [[id:2cd51b23-f253-40e2-8c5d-6f2924ca484d][Manageability]]
** [[id:3913909e-2b8d-465c-8303-5c634bd08f57][Observability]]
* [[id:30bd9ede-b4fd-47c7-b848-a0d225277d4a][Fallacies of Distributed Computing]]
* Cloud Native Patterns
** [[id:d1884770-97bb-4bbd-973a-d3bea77b68c0][context.Context]]
- read up : https://pkg.go.dev/context
- used to idiomatically convey, cancellation signals, deadline abstractions (timeouts), etc.
- context values are thread safe
- read up : https://dave.cheney.net/2017/01/26/context-is-for-cancelation
- also read up : https://dave.cheney.net/2017/08/20/context-isnt-for-cancellation
** Stability Patterns
*** [[id:64b6bd2a-de67-4f28-9406-336879845d80][Circuit Breaker Stability ]]
*** [[id:d78e2fbe-8c51-489c-b97c-74b01a0abcb6][Debounce]]
*** [[id:e5870690-91ef-41f4-adea-eb48c3be2325][Retry Stability Pattern]]
*** [[id:f437c67e-a680-4400-8640-1fd32cc9e363][Throttle Stability Pattern]]
*** [[id:ce3bf6ec-0c36-4fc7-ae3d-3483ff67cfc3][Timeout]]
** [[id:618d0535-411d-4c36-b176-84413ec8bfc1][Concurrency]] Patterns

* Resources
 -  https://github.com/rootsongjc/awesome-cloud-native
