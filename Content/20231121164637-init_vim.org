:PROPERTIES:
:ID:       fdbc2e71-ec1f-40b4-82c3-290634126675
:END:
#+title: init.vim+lua
#+filetags: :vim:

Well, I shifted to neovim on 0x219B...
I'm a one file man so will probably be folding a lot of code

* Configs
** init.vim
#+begin_src vimscript
" INIT.VIM

"{{{ Base
set relativenumber number
set hidden
set path+=$PWD/**
set undofile
set foldmethod=marker
set foldlevel=100
set nrformats+=alpha
set ignorecase smartcase
set wrapscan
let mapleader="\<Space>"
let g:netrw_keepdir = 0
set splitbelow
filetype plugin indent on
nnoremap <leader>d :Ex<CR>
"{{{ init.vim
nnoremap <silent> <Leader>ev :edit /root/.config/nvim/init.vim<CR>
nnoremap <silent> <Leader>el :edit /root/.config/nvim/lua/init.lua<CR>
nnoremap <silent> <Leader>es :source /root/.config/nvim/init.vim<CR>
"}}}
"{{{ Tabs
nnoremap <leader>te :tabe<CR>
nnoremap <leader>tc :tabc<CR>
nnoremap <leader>tn :tabn<CR>
nnoremap <leader>tp :tabp<CR>
nnoremap <leader>t :<C-U>tabnext <C-R>=input("Enter tab number: ")<CR><CR>
"}}}
"Searching {{{
set hlsearch
nnoremap <esc><esc> :nohlsearch<CR><esc>
nnoremap <silent> <leader>ff :FZF<CR>
nnoremap <silent> <leader>fh :FZF~<CR>
nnoremap <silent> <leader>fa :Rg<CR>
set grepprg=rg\ --vimgrep\ --smart-case\ --follow
" }}}
"}}}
"{{{ Plugs
call plug#begin('~/.local/share/nvim/plugged')
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', {'do': { -> fzf#install()}}
Plug 'frazrepo/vim-rainbow'
Plug 'junegunn/vim-peekaboo'
Plug 'simnalamburt/vim-mundo'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'itchyny/lightline.vim'
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
Plug 'williamboman/mason.nvim'
Plug 'williamboman/mason-lspconfig.nvim'
Plug 'L3MON4D3/LuaSnip'
Plug 'VonHeikemen/lsp-zero.nvim', {'branch': 'v3.x'}
Plug 'EdenEast/nightfox.nvim'
Plug 'Exafunction/codeium.vim', { 'branch': 'main' }
Plug 'tpope/vim-eunuch'
call plug#end()
"}}}
"{{{ Plug-Config
"{{{ LSP-zero
nnoremap <leader>lf :LspZeroFormat<CR>
nnoremap <leader>li :LspInfo<CR>
nnoremap <leader>lr :LspRestart<CR>
nnoremap <leader>l1 :LspStart<CR>
nnoremap <leader>l0 :LspStop<CR>
"}}}
"{{{ codeium
nnoremap <leader>cd :CodeiumDisable<CR>
nnoremap <leader>ce :CodeiumEnable<CR>
imap <script><silent><nowait><expr> <C-g> codeium#Accept()
"}}}
"{{{ Mason
nnoremap <leader>pm :Mason<CR>
"}}}
"{{{ Rainbow
let g:rainbow_active = 1
"}}}
"{{{ Mundo
nnoremap <leader>m :MundoToggle<CR>
" }}}
"Statusline{{{
set laststatus=2
set noshowmode
let g:lightline = {
            \ 'colorscheme': 'powerlineish',
            \ }
"}}}
"{{{ colorscheme
colorscheme carbonfox
"}}}
"}}}
"{{{ Au Bufs
"{{{ Python
augroup PythonFolding
    autocmd!
    autocmd FileType python setlocal foldmethod=indent foldlevel=1
augroup END
"}}}
"}}}
"{{{ Lua require
lua require("init")
"}}}
#+end_src
** init.lua
#+begin_src lua
  -- INIT.LUA

-- {{{ NVIM-CMP
local cmp = require 'cmp'

cmp.setup({
        snippet = {
                -- REQUIRED - you must specify a snippet engine
                expand = function(args)
                        vim.fn["vsnip#anonymous"](args.body)
                end,
        },
        window = {
                completion = cmp.config.window.bordered(),
                documentation = cmp.config.window.bordered(),
        },
        mapping = cmp.mapping.preset.insert({
                ['<C-p>'] = cmp.mapping.scroll_docs(-4),
                ['<C-n>'] = cmp.mapping.scroll_docs(4),
                ['<C-Space>'] = cmp.mapping.complete(),
                ['<C-e>'] = cmp.mapping.abort(),
                ['<CR>'] = cmp.mapping.confirm({ select = true }),
        }),
        sources = cmp.config.sources({
                { name = 'nvim_lsp' },
                { name = 'vsnip' },
        }, {
                { name = 'buffer' },
        })
})

cmp.setup.filetype('gitcommit', {
        sources = cmp.config.sources({
                { name = 'git' },
        }, {
                { name = 'buffer' },
        })
})

cmp.setup.cmdline({ '/', '?' }, {
        mapping = cmp.mapping.preset.cmdline(),
        sources = {
                { name = 'buffer' }
        }
})

cmp.setup.cmdline(':', {
        mapping = cmp.mapping.preset.cmdline(),
        sources = cmp.config.sources({
                { name = 'path' }
        }, {
                { name = 'cmdline' }
        })
})

-- }}}
-- {{{ LSP-zero
local lsp_zero = require('lsp-zero')

lsp_zero.on_attach(function(client, bufnr)
        -- see :help lsp-zero-keybindings
        -- to learn the available actions
        lsp_zero.default_keymaps({ buffer = bufnr })
end)
-- lsp_zero.format_on_save({
--   format_opts = {
--     async = false,
--     timeout_ms = 10000,
--   },
--   servers = {
--     ['pylsp'] = { 'python' },
--     ['vimls'] = { 'vimscript' },
--     ['lua_ls'] = { 'lua' },
--   }
-- })
lsp_zero.set_sign_icons({
        error = '✘',
        warn = '▲',
        hint = '⚑',
        info = '»'
})
-- }}}
-- {{{ Mason
require('mason').setup({})
require('mason-lspconfig').setup({
        ensure_installed = { "pylsp", "vimls", "lua_ls" },
        handlers = {
                lsp_zero.default_setup,
        },
})
-- }}}
#+end_src

