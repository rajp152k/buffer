:PROPERTIES:
:ID:       aeb0d87f-d3d3-4250-a2d0-96e343f2b8c1
:END:
#+title: Dependency Injection
#+filetags: :eng:cs:

* Overview
** Inversion of Control : decoupling dependencies via interfaces
*** [[id:8763d3c3-93bd-4c25-81fd-c1e7a6d22d68][Dependency Inversion Principle]] : high-level modules not depend on low-level
*** [[id:4160f4dd-443b-4c41-8bc0-5d966bed8092][Interface Segregation Principle]] : clients not forced to depend on unused interfaces

** Types of Dependency Injection
*** Constructor Injection : dependencies passed through constructors
*** Setter Injection : dependencies set through setter methods
*** Interface Injection : dependencies injected through interfaces

** Benefits
*** [[id:adaf5bfa-48f9-415b-893e-7398b10f383e][Loose Coupling]] : reduced dependency between modules
*** [[id:a606fb1a-1c11-4f3e-88b1-63fed57b772a][Testability]] : easier unit testing via [[id:58d56f0b-c6a0-4d0d-b4f2-e0c5a8615b3a][mock]] dependencies
*** [[id:e7e8df63-f06f-4b34-bd38-29f30d4ce01b][Reusability]] : modules more modular and reusable

** Common Implementations
*** Spring Framework : Java-based dependency injection container
*** Guice : Java-based dependency injection framework
*** Dagger : Android-based dependency injection framework
