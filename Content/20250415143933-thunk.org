:PROPERTIES:
:ID:       cea53266-4a34-4f27-b548-9209541d40f1
:END:
#+title: Thunk
#+filetags: :programming:

* Overview

  A thunk is a [[id:a31671c6-12ea-4fc9-93cb-73d29fd508a6][subroutine]] (a block of code) used to delay the evaluation or computation of a value until it is needed.  In simpler terms, it's a piece of code that wraps another piece of code, typically to postpone its execution.  It acts as a placeholder for the result of an expression.


     -    [[id:eba75a47-6e35-4146-a152-b05089bbd8ec][Delayed Evaluation]] (Lazy Evaluation):  The primary purpose of a thunk is to implement lazy evaluation. Instead of evaluating an expression immediately, a thunk encapsulates the expression and its environment.  The expression is evaluated only when its value is explicitly required. This is often referred to as "call-by-need".

     -    Control Flow: Thunks can be used to control the order in which code is executed. They allow you to conditionally execute code based on whether its result is actually needed.

     -    Optimization:  Lazy evaluation, facilitated by thunks, can lead to performance optimizations. If the result of a computation is never used, the computation is never performed, saving processing time and resources.

     -    [[id:aa4f1b85-5896-4990-bfc8-c29cfd59dd60][Modularity]] and [[id:20240218T061653.528745][Abstraction]]: Thunks can improve code modularity by decoupling the computation of a value from its usage.  The code that produces the value doesn't need to know when or how the value will be used, and the code that uses the value doesn't need to know how it's produced.

     -    [[id:ca98597a-027f-4eda-bbb2-801b8f74d0a5][Side-Effect]] Management: By delaying evaluation, thunks can help manage side effects (e.g., I/O operations).  You can ensure that side effects occur only when necessary, which can be crucial in concurrent or asynchronous environments.

* Crude Implementation

     -   *Creation:*  When an expression is encountered that should be evaluated lazily, a thunk is created. This thunk typically stores:
        -   A [[id: - 230715T174319.700414][pointer]] to the code (function) that will perform the computation.
        -   The [[id:d - 39a3c-ee63-479e-943e-5bebc50e32bd][environment]] (state)(the values of variables) needed by that code.  This is vital; otherwise, the deferred evaluation would happen in the wrong context.

     -   Delay:  The expression is not immediately evaluated.  The thunk simply "holds" the recipe for computing the value.

     -   Force: When the value of the expression is actually needed , the thunk is "forced" (or "evaluated"). This means the code within the thunk is executed.

     -   Memoization:  A crucial optimization is /memoization/.  Once the thunk is forced and the value is computed, the thunk often replaces itself with the computed value.  Subsequent attempts to force the thunk will then simply return the already-computed value. This prevents redundant computations and is a key characteristic of true "call-by-need".

* Resources
 - https://en.wikipedia.org/wiki/Thunk
